{"name": "test_home[7410162452-Ayush2511-C8:F0:9E:29:41:31]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Something went wrong\nMessage: unexpected alert open: {Alert text : Something went wrong}\n  (Session info: chrome=123.0.6312.86)\nStacktrace:\n\tGetHandleVerifier [0x00BB4CC3+225091]\n\t(No symbol) [0x00AE4E11]\n\t(No symbol) [0x00989A7A]\n\t(No symbol) [0x009F62A2]\n\t(No symbol) [0x009DF2F6]\n\t(No symbol) [0x009B79B9]\n\t(No symbol) [0x009B879D]\n\tsqlite3_dbdata_init [0x01029A63+4064547]\n\tsqlite3_dbdata_init [0x0103106A+4094762]\n\tsqlite3_dbdata_init [0x0102B968+4072488]\n\tsqlite3_dbdata_init [0x00D2C9C9+930953]\n\t(No symbol) [0x00AF07E4]\n\t(No symbol) [0x00AEAD08]\n\t(No symbol) [0x00AEAE31]\n\t(No symbol) [0x00ADCAA0]\n\tBaseThreadInitThunk [0x76DCFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B57C5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B57C2E+238]", "trace": "self = <testCases.test_devices.Test_Home object at 0x0000023CE9FEB6A0>, user = '7410162452', pwd = 'Ayush2511', mac = 'C8:F0:9E:29:41:31'\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c974d6367edac85267314e704972195e\")>\n\n    @pytest.mark.parametrize('user,pwd,mac', [(\"7410162452\", \"Ayush2511\", \"C8:F0:9E:29:41:31\")])\n    \n    # (\"74101624521\", \"Ayush2511\", \"C8:F0:9E:29:41:31\"), (\"7410162452\", \"Ayush2511\", \"C8:F0:9E:29:41\")\n    \n    \n    def test_home(self,user,pwd,mac,setup):\n        # self.logger.info(\"****_Login_Test_Started_***\")\n        self.driver=setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.driver.implicitly_wait(5)\n    \n        self.lgn=Login(self.driver)\n        self.lgn.Enteruserid(user)\n        self.lgn.Enterpassword(pwd)\n        self.lgn.Clickonlogin()\n        time.sleep(5)\n        # self.logger.info(\"****_HomePage_Test_Started_***\")\n        # time.sleep(5)\n        self.act_url1 = self.driver.current_url\n        self.hp=Home(self.driver)\n        # time.sleep(5)\n        self.hp.Enter_macid(mac)\n        # time.sleep(5)\n        self.hp.Click_on_dropdown()\n        self.hp.select_environment()\n        self.hp.click_on_connect()\n        # time.sleep(5)\n        self.act_url2 = self.driver.current_url\n        try:\n            # time.sleep(5)\n>           self.data_ac=self.driver.find_element(By.XPATH,\"//td[text()='DATA_AC']\").is_displayed()\nE           AttributeError: 'NoneType' object has no attribute 'is_displayed'\n\ntestCases\\test_devices.py:54: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_devices.Test_Home object at 0x0000023CE9FEB6A0>, user = '7410162452', pwd = 'Ayush2511', mac = 'C8:F0:9E:29:41:31'\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c974d6367edac85267314e704972195e\")>\n\n    @pytest.mark.parametrize('user,pwd,mac', [(\"7410162452\", \"Ayush2511\", \"C8:F0:9E:29:41:31\")])\n    \n    # (\"74101624521\", \"Ayush2511\", \"C8:F0:9E:29:41:31\"), (\"7410162452\", \"Ayush2511\", \"C8:F0:9E:29:41\")\n    \n    \n    def test_home(self,user,pwd,mac,setup):\n        # self.logger.info(\"****_Login_Test_Started_***\")\n        self.driver=setup\n        self.driver.get(self.baseurl)\n        self.driver.maximize_window()\n        self.driver.implicitly_wait(5)\n    \n        self.lgn=Login(self.driver)\n        self.lgn.Enteruserid(user)\n        self.lgn.Enterpassword(pwd)\n        self.lgn.Clickonlogin()\n        time.sleep(5)\n        # self.logger.info(\"****_HomePage_Test_Started_***\")\n        # time.sleep(5)\n        self.act_url1 = self.driver.current_url\n        self.hp=Home(self.driver)\n        # time.sleep(5)\n        self.hp.Enter_macid(mac)\n        # time.sleep(5)\n        self.hp.Click_on_dropdown()\n        self.hp.select_environment()\n        self.hp.click_on_connect()\n        # time.sleep(5)\n        self.act_url2 = self.driver.current_url\n        try:\n            # time.sleep(5)\n            self.data_ac=self.driver.find_element(By.XPATH,\"//td[text()='DATA_AC']\").is_displayed()\n            print(self.data_ac)\n            time.sleep(5)\n            self.driver.find_element(By.XPATH,\"//button[text()='Restart Device']\").click()\n            time.sleep(5)\n            self.do= self.driver.find_element(By.XPATH, \"//td[text()='DO']\").is_displayed()\n            print(self.do)\n            self.driver.close()\n            assert self.data_ac==True\n            assert self.do==True\n    \n        # assert self.act_url1 == \"https://ltconfigweb.beta.livingthings.in/\"\n        # assert self.act_url2 == \"https://ltconfigweb.beta.livingthings.in/device\n    \n        except:\n>           allure.attach(self.driver.get_screenshot_as_png(),name=\"Test_Login\",attchement_type=AttachmentType.PNG)\n\ntestCases\\test_devices.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1262: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode('ascii'))\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1274: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:400: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023CE7E4C6D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Something went wrong\"},\"error\":\"unexpected alert open\",\"message\":\"...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B57C5E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B57C2E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Something went wrong\nE           Message: unexpected alert open: {Alert text : Something went wrong}\nE             (Session info: chrome=123.0.6312.86)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00BB4CC3+225091]\nE           \t(No symbol) [0x00AE4E11]\nE           \t(No symbol) [0x00989A7A]\nE           \t(No symbol) [0x009F62A2]\nE           \t(No symbol) [0x009DF2F6]\nE           \t(No symbol) [0x009B79B9]\nE           \t(No symbol) [0x009B879D]\nE           \tsqlite3_dbdata_init [0x01029A63+4064547]\nE           \tsqlite3_dbdata_init [0x0103106A+4094762]\nE           \tsqlite3_dbdata_init [0x0102B968+4072488]\nE           \tsqlite3_dbdata_init [0x00D2C9C9+930953]\nE           \t(No symbol) [0x00AF07E4]\nE           \t(No symbol) [0x00AEAD08]\nE           \t(No symbol) [0x00AEAE31]\nE           \t(No symbol) [0x00ADCAA0]\nE           \tBaseThreadInitThunk [0x76DCFCC9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77B57C5E+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x77B57C2E+238]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:235: UnexpectedAlertPresentException"}, "parameters": [{"name": "user", "value": "'7410162452'"}, {"name": "pwd", "value": "'Ayush2511'"}, {"name": "mac", "value": "'C8:F0:9E:29:41:31'"}], "start": 1712077949398, "stop": 1712077958930, "uuid": "90a8fb33-284f-40b9-911a-e2a0ef56f8da", "historyId": "b9511d4939206ec0b5451481c7abc793", "testCaseId": "47885682822fe7e53ddc8872ca0a4ec5", "fullName": "test_devices.Test_Home#test_home", "labels": [{"name": "suite", "value": "test_devices"}, {"name": "subSuite", "value": "Test_Home"}, {"name": "host", "value": "DESKTOP-N021PBS"}, {"name": "thread", "value": "15172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_devices"}]}